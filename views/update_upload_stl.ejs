<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload STL - Doctor Portal</title>
    <link rel="stylesheet" href="/assets/css/side_menu.css">
    <link rel="stylesheet" href="/assets/css/add_case.css">
    <link rel="stylesheet" href="/assets/css/date-picker.css">
    <link rel="stylesheet" href="/assets/css/validation.css">
    <link rel="stylesheet" href="/assets/css/toast.css">
    <script src="/assets/js/components.js"></script>
    <script src="/assets/js/date-picker.js"></script>
</head>
<body>
    <!-- Navigation Rail Component -->
    <div id="navRail"></div>

    <!-- Main Content -->
    <main class="main-content">
        <div class="content-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/aligners-cases" class="breadcrumb-item">Home</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <span class="breadcrumb-item active">Update Case</span>
            </nav>

            <!-- Page Header -->
            <div class="page-header">
                <div class="page-header-left">
                    <div class="title-badges-row">
                        <h1 class="page-title">Update Case</h1>
                    </div>
                </div>
                <div class="page-actions">
                    <% if (user && user.role != 'doctor') { %>
                        <button class="btn btn-delete" id="deleteCaseBtn">Delete Case</button>
                    <% } %>
                </div>
            </div>

            <!-- Upload STL Form -->
            <form class="add-case-form" id="uploadStlForm">
                <!-- Patient Details Section -->
                <div class="form-section">
                    <h2 class="section-title">Patient Details</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="patientName">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Name</span>
                                </label>
                                <input type="text" id="patientName" name="patientName" placeholder="Input here" value="<%= upload_stl_details.name %>">
                            </div>
                            <div class="form-field">
                                <label for="patientGender">Gender</label>
                                <div class="select-wrapper">
                                    <select id="patientGender" name="patientGender" value="<%= upload_stl_details.gender %>">
                                        <option value="">Select</option>
                                        <option value="Male" <%= upload_stl_details.gender === 'Male' ? 'selected' : '' %>>Male</option>
                                        <option value="Female" <%= upload_stl_details.gender === 'Female' ? 'selected' : '' %>>Female</option>
                                        <option value="Prefer not to say" <%= upload_stl_details.gender === 'Prefer not to say' ? 'selected' : '' %>>Prefer not to say</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="dateOfBirth">Date of Birth</label>
                                <input type="date" id="dateOfBirth" name="dateOfBirth" data-date-picker value="<%= upload_stl_details.dob %>">
                            </div>
                            <div class="form-field">
                                <label for="email">Email</label>
                                <input type="email" id="email" name="email" placeholder="Input here" value="<%= upload_stl_details.email %>">
                            </div>
                            <div class="form-field">
                                <label for="treatmentBrand">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Treatment Brand</span>
                                </label>
                                <div class="select-wrapper">
                                    <select id="treatmentBrand" name="treatmentBrand" value="<%= upload_stl_details.treatment_brand %>">
                                        <option value="">Select</option>
                                        <option value="DCA Pro" <%= upload_stl_details.treatment_brand === 'DCA Pro' ? 'selected' : '' %>>DCA Pro</option>
                                        <option value="Diamond Aligner" <%= upload_stl_details.treatment_brand === 'Diamond Aligner' ? 'selected' : '' %>>Diamond Aligner</option>
                                        <option value="OEM-Plain" <%= upload_stl_details.treatment_brand === 'OEM-Plain' ? 'selected' : '' %>>OEM-Plain</option>
                                        <option value="OEM-Clinic Brand" <%= upload_stl_details.treatment_brand === 'OEM-Clinic Brand' ? 'selected' : '' %>>OEM-Clinic Brand</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="customSN">Custom SN</label>
                                <input type="text" id="customSN" name="customSN" placeholder="Input here" value="<%= upload_stl_details.custom_sn %>">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Model Upload Section -->
                <div class="form-section">
                    <h2 class="section-title">Model Upload</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="product">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Product</span>
                                </label>
                                <div class="select-wrapper">
                                    <select id="product" name="product" value="<%= upload_stl_details.product %>">
                                        <option value="">Select</option>
                                        <option value="Clear Aligners 0.76mm" <%= upload_stl_details.product === 'Clear Aligners 0.76mm' ? 'selected' : '' %>>Clear Aligners 0.76mm</option>
                                        <option value="Retainer 1.0mm" <%= upload_stl_details.product === 'Retainer 1.0mm' ? 'selected' : '' %>>Retainer 1.0mm</option>
                                        <option value="Retainer 1.3mm / Soft Nightguard 1.3mm" <%= upload_stl_details.product === 'Retainer 1.3mm / Soft Nightguard 1.3mm' ? 'selected' : '' %>>Retainer 1.3mm / Soft Nightguard 1.3mm</option>
                                        <option value="Soft Nightguard 2.0mm" <%= upload_stl_details.product === 'Soft Nightguard 2.0mm' ? 'selected' : '' %>>Soft Nightguard 2.0mm</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="productArrivalDate">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Product Arrival Date</span>
                                    <span class="info-icon">
                                        <img src="/assets/images/info-icon.svg" alt="Info Icon">
                                        <div class="info-tooltip">
                                            <div class="tooltip-content">
                                                This is your preferred date to receive<br>
                                                the product. You can only select a<br>
                                                date that is at least 7 days from the<br>
                                                case creation date.
                                            </div>
                                        </div>
                                    </span>
                                </label>
                                <div class="date-wrapper">
                                    <input type="date" id="productArrivalDate" name="productArrivalDate" data-date-picker data-min-date="" data-placeholder="Select" value="<%= upload_stl_details.product_arrival_date %>">
                                </div>
                            </div>
                        </div>

                        <div class="form-field">
                            <label for="modelType">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Model Type</span>
                            </label>
                            <div class="select-wrapper">
                                <select id="modelType" name="modelType" value="<%= upload_stl_details.model_type %>">
                                    <option value="">Select</option>
                                    <option value="Digital Model" <%= upload_stl_details.model_type === 'Digital Model' ? 'selected' : '' %>>Digital Model</option>
                                    <option value="Plaster Model" <%= upload_stl_details.model_type === 'Plaster Model' ? 'selected' : '' %>>Plaster Model</option>
                                </select>
                            </div>
                        </div>

                        <!-- Documents Upload -->
                        <div class="upload-field full-width">
                            <label for="documents">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Documents (*STL, PLY or ZIP)</span>
                            </label>
                            <p class="upload-instructions">Upload one or multiple attachments.</p>
                            <div class="file-upload file-upload-simple">
                                <input type="file" id="documents" name="documents" accept=".stl,.ply,.zip" multiple>
                                <div class="upload-placeholder">
                                    <span>Choose Files</span>
                                    <img src="/assets/images/file-upload.png" alt="Upload Icon" class="file-upload-icon">
                                </div>
                            </div>
                            <!-- File List Display -->
                            <div class="uploaded-files-list" id="uploadedFilesList" style="display: none;">
                                <div class="files-container" id="filesContainer">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="saveDraftBtn">Save as Draft</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Submit</button>
                </div>
            </form>
        </div>
    </main>
      <!-- Delete Case Modal -->
      <div class="modal-overlay" id="deleteModal">
        <div class="modal-dialog">
            <div class="modal-header activate-modal-header">
                <h3 class="modal-title">Confirm to Delete?</h3>
                <button class="modal-close" id="closeDeleteModal">
                    <img src="/assets/images/x-icon.svg" alt="Close">
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-message">You will not be able to recover this case once it is deleted.</p>
            </div>
            <div class="modal-actions">
                <button class="modal-btn modal-btn-cancel" id="cancelDelete">Cancel</button>
                <button class="modal-btn modal-btn-confirm" id="confirmDelete">Yes, Delete</button>
            </div>
        </div>
    </div>
    <script src="/assets/js/jquery.js"></script>
    <script src="/assets/js/axios.min.js"></script>
    <script src="/assets/js/toast.js"></script>
    <script>
        // Load navigation rail component
        document.addEventListener('DOMContentLoaded', () => {
            loadComponent('navRail', '/components/side-menu');

            const deleteModal = document.getElementById('deleteModal');
            const deleteBtn = document.getElementById('deleteCaseBtn');
            const cancelDelete = document.getElementById('cancelDelete');
            const confirmDelete = document.getElementById('confirmDelete');
            const closeDeleteModal = document.getElementById('closeDeleteModal');

            deleteBtn.addEventListener('click', () => {
                deleteModal.classList.add('show');
            });

            // Close modal functions
            function closeDeleteModalDialog() {
                deleteModal.classList.remove('show');
            }
                
            cancelDelete.addEventListener('click', closeDeleteModalDialog);
                
            confirmDelete.addEventListener('click', closeDeleteModalDialog);
            deleteModal.addEventListener('click', (e) => {
                if (e.target === deleteModal) {
                    closeDeleteModalDialog();
                }
            });
            closeDeleteModal.addEventListener('click', closeDeleteModalDialog);

            // Set as draft button
            const confirmDeleteBtn = document.getElementById('confirmDelete');
                if (confirmDeleteBtn) {
                    confirmDeleteBtn.addEventListener('click', async () => {
                        try {
                            const response = await axios.post(`/cases/${window.CASE_ID}/delete-draft`)
                            .then(response => {
                                //redirect to aligners case with success message
                                window.location.href = `/aligners-cases?success=${encodeURIComponent(response.data.message)}`;
                            })
                            .catch(error => {
                                console.error('Failed to delete case', error);
                                Toast.error(error.response.data.message || 'Failed to delete case');
                            });

                            
                        } catch (error) {
                            console.error('Error deleting case:', error);
                            Toast.error(error.response.data.message || 'Failed to delete case');
                        }
                    });
                }
            
            // Initialize custom date pickers
            //initializeCustomDatePickers();
            
            // Initialize with existing files from backend
            // Get files from a global variable that we'll define in a script tag above
            const backendFiles = <%- JSON.stringify(upload_stl_files || []) %>;
            
            if (backendFiles && backendFiles.length > 0) {
                // Process backend files
                uploadedFiles = backendFiles.map(file => {
                    const fileName = file.file_name.split('/').pop();
                    // Initialize all existing files as 'unchanged'
                    fileStatuses[file.id] = 'unchanged';
                    return {
                        //id: 'existing_' + file.file_name.replace(/[^a-zA-Z0-9]/g, '_'),
                        name: fileName,
                        id: file.id,
                        signedurl: file.signedurl,
                        isExisting: true,
                        fileType: file.file_type
                    };
                });
                
                // Display existing files
                renderFilesList();
                updateUploadPlaceholder();
            }
        });
        
        // function initializeCustomDatePickers() {
        //     // Set minimum date for product arrival date (7 days from today)
        //     const today = new Date();
        //     const minDate = new Date(today);
        //     minDate.setDate(today.getDate() + 7);
            
        //     const productArrivalInput = document.getElementById('productArrivalDate');
        //     if (productArrivalInput) {
        //         productArrivalInput.setAttribute('data-min-date', minDate.toISOString().split('T')[0]);
        //     }
            
        //     // Initialize all date pickers
        //     initializeDatePickers('[data-date-picker]');
        // }

        // File upload handling - Multi-file support
        // Initialize with empty array
        let uploadedFiles = [];
        // Track file statuses: new, existing (unchanged), or removed
        let fileStatuses = {};
        
        // We'll initialize this with backend data in DOMContentLoaded
        
        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // Helper function to get file icon based on extension
        function getFileIcon(filename) {
            const ext = filename.split('.').pop().toLowerCase();
            return '/assets/images/document-icon.svg'; // Using existing document icon
        }
        
        // Helper function to truncate filename with ellipsis if too long
        function truncateFilename(filename, maxLength = 100) {
            if (filename.length <= maxLength) return filename;
            
            const extension = filename.split('.').pop();
            const nameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));
            const truncatedName = nameWithoutExt.substring(0, maxLength - extension.length - 3) + '...';
            
            return truncatedName + '.' + extension;
        }
        
        // Helper function to add file to the list
        function addFileToList(file) {
            const fileId = 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            const fileData = {
                id: fileId,
                file: file,
                name: file.name,
                size: file.size,
                type: file.type,
                isNew: true
            };
            
            // Mark as new in our tracking
            fileStatuses[fileId] = 'new';
            
            uploadedFiles.push(fileData);
            renderFilesList();
            updateUploadPlaceholder();
            
            // Clear validation error when files are added
            if (uploadedFiles.filter(f => fileStatuses[f.id] !== 'removed').length > 0) {
                formValidation.clearValidation('documents');
            }
        }
        
        // Helper function to remove file from the list
        function removeFileFromList(fileId) {
            console.log('fileId', fileId);
            console.log('uploadedFiles to removed', uploadedFiles);
            
            // Convert fileId to number if it's a numeric string
            const numericId = parseInt(fileId);
            const idToCompare = isNaN(numericId) ? fileId : numericId;
            
            // Use loose equality (==) to match both string and number IDs
            const fileToRemove = uploadedFiles.find(f => f.id == idToCompare);
            console.log('fileToRemove', fileToRemove);
            
            if (fileToRemove && fileToRemove.isExisting) {
                // Mark existing file as 'removed' in our tracking object
                fileStatuses[fileToRemove.id] = 'removed';
            } else if (fileToRemove) {
                // For new files, completely remove them
                uploadedFiles = uploadedFiles.filter(f => f.id != idToCompare);
            }
            
            // Always update the display after modifying the files list
            renderFilesList();
            updateUploadPlaceholder();
            
            // Show validation error if no files remain
            const remainingFiles = uploadedFiles.filter(f => {
                if (!f.isExisting) return true; // Count all new files
                return fileStatuses[f.id] !== 'removed'; // Only count non-removed existing files
            });
            
            if (remainingFiles.length === 0) {
                formValidation.showError('documents', 'Documents are required.');
            }
        }
        
        // Helper function to render files list
        function renderFilesList() {
            const filesContainer = document.getElementById('filesContainer');
            const uploadedFilesList = document.getElementById('uploadedFilesList');
            
            // Filter out files marked as removed for display purposes
            const filesToDisplay = uploadedFiles.filter(f => {
                if (!f.isExisting) return true; // Keep all new files
                // For existing files, check if they're marked as removed
                return fileStatuses[f.id] !== 'removed';
            });
            
            if (filesToDisplay.length === 0) {
                uploadedFilesList.style.display = 'none';
                return;
            }
            
            uploadedFilesList.style.display = 'block';
            
            filesContainer.innerHTML = filesToDisplay.map(fileData => {
                // Different display for existing files vs newly uploaded files
                console.log('fileData.isExisting', fileData);
                if (fileData.isExisting) {
                    return `
                        <div class="file-item" data-file-id="${fileData.id}">
                            <div class="file-info">
                                <img src="${getFileIcon(fileData.name)}" alt="File" class="file-icon">
                                <p class="file-name" title="${fileData.name}">${truncateFilename(fileData.name)}</p>
                            </div>
                           <button type="button" class="cancel-upload" onclick="removeFileFromList('${fileData.id}')">
                                <img src="/assets/images/cancel-file-upload.svg" alt="Remove file">
                            </button>
                        </div>
                    `;
                } else {
                    return `
                        <div class="file-item" data-file-id="${fileData.id}">
                            <div class="file-info">
                                <img src="${getFileIcon(fileData.name)}" alt="File" class="file-icon">
                                <p class="file-name" title="${fileData.name}">${truncateFilename(fileData.name)}</p>
                            </div>
                            <button type="button" class="cancel-upload" onclick="removeFileFromList('${fileData.id}')">
                                <img src="/assets/images/cancel-file-upload.svg" alt="Remove file">
                            </button>
                        </div>
                    `;
                }
            }).join('');
        }
        
        // Helper function to update upload placeholder text
        function updateUploadPlaceholder() {
            const uploadPlaceholder = document.querySelector('.upload-placeholder');
            const firstSpan = uploadPlaceholder.querySelector('span:first-child');
            
            // if (uploadedFiles.length === 0) {
            //     firstSpan.textContent = 'Choose File';
            //     document.querySelector('.file-upload').classList.remove('has-file');
            // } else {
            //     firstSpan.textContent = `${uploadedFiles.length} file(s) selected`;
            //     document.querySelector('.file-upload').classList.add('has-file');
            // }
        }
        
        // File input change handler - Multiple file upload
        document.getElementById('documents').addEventListener('change', function(e) {
            const input = e.target;
            
            if (input.files.length > 0) {
                // Process all selected files
                Array.from(input.files).forEach(file => {
                    // Check if file already exists (by name and size)
                    const exists = uploadedFiles.some(f => f.name === file.name && f.size === file.size);
                    if (!exists) {
                        addFileToList(file);
                    }
                });
            }
            
            // Clear the input using requestAnimationFrame to ensure it happens after current processing
            requestAnimationFrame(() => {
                input.value = '';
            });
        });

        // Drag and drop functionality for file upload
        const fileUpload = document.querySelector('.file-upload');
        const fileInput = document.getElementById('documents');

        fileUpload.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUpload.classList.add('drag-over');
        });

        fileUpload.addEventListener('dragleave', () => {
            fileUpload.classList.remove('drag-over');
        });

        fileUpload.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUpload.classList.remove('drag-over');
            
            if (e.dataTransfer.files.length > 0) {
                // Process all dropped files
                Array.from(e.dataTransfer.files).forEach(file => {
                    // Check if file already exists (by name and size)
                    const exists = uploadedFiles.some(f => f.name === file.name && f.size === file.size);
                    if (!exists) {
                        addFileToList(file);
                    }
                });
            }
        });

        // Validation rules
        const validations = [
            {
                field: 'patientName',
                rule: 'required',
                message: 'Name is required.'
            },
            {
                field: 'treatmentBrand',
                rule: 'required',
                message: 'Treatment Brand is required.'
            },
            {
                field: 'product',
                rule: 'required',
                message: 'Product is required.'
            },
            {
                field: 'productArrivalDate',
                rule: 'required',
                message: 'Product Arrival Date is required.'
            },
            {
                field: 'modelType',
                rule: 'required',
                message: 'Model Type is required.'
            },
            {
                field: 'documents',
                rule: () => {
                    // Check for files that are actually available (not marked as removed)
                    const availableFiles = uploadedFiles.filter(f => {
                        if (!f.isExisting) return true; // Count all new files
                        return fileStatuses[f.id] !== 'removed'; // Only count non-removed existing files
                    });
                    return availableFiles.length > 0;
                },
                message: 'Documents are required.'
            }
        ];

        // Function to handle form submission
        async function handleFormSubmission(status, button) {
            // Clear any existing validation errors
            formValidation.clearAllValidation('uploadStlForm');
            formValidation.clearFormError('uploadStlForm');

            // Validate all fields for both draft and submit
            const isValid = formValidation.validateFields(validations);
            console.log('isValid', isValid);
            if (!isValid) {
                return;
            }

            // Disable button and show loading state
            const originalText = button.textContent;
            button.disabled = true;
            button.classList.add('loading');
            button.textContent = status === '1' ? 'Submitting Case...' : 'Saving Draft...';

            const formData = new FormData();
            formData.append('name', document.getElementById('patientName').value);
            formData.append('gender', document.getElementById('patientGender').value);
            formData.append('email', document.getElementById('email').value);
            formData.append('dob', document.getElementById('dateOfBirth').value);
            formData.append('treatment_brand', document.getElementById('treatmentBrand').value);
            formData.append('custom_sn', document.getElementById('customSN').value);
            formData.append('product', document.getElementById('product').value);
            formData.append('product_arrival_date', document.getElementById('productArrivalDate').value);
            formData.append('model_type', document.getElementById('modelType').value);
            
            // Create a file flags object to track status of each file by ID
            const fileFlags = {};
            
            // Process all files including those marked for removal
            uploadedFiles.forEach((fileData) => {
                if (fileData.isExisting) {
                    // For existing files, check status
                    const status = fileStatuses[fileData.id] || 'unchanged';
                    
                    // Create flag entry using file ID as the key
                    fileFlags[fileData.id] = status === 'removed' ? 'remove' : 'existing';
                    
                    // Only add to formData if not removed
                    if (status !== 'removed') {
                        formData.append('existingFiles', fileData.id);
                    }
                } else {
                    // For new files, send the actual file and mark as new
                    formData.append('documents', fileData.file);
                    // For new files, we'll use a temporary ID in the flags
                    if (fileData.id) {
                        fileFlags['new_' + fileData.id] = 'new';
                    }
                }
            });
            
            console.log('File flags to send:', fileFlags);
            
            
            // Add file flags to the form data
            formData.append('file_flags', JSON.stringify(fileFlags));
            formData.append('status', status);
            formData.append('category', 'Upload STL');

            console.log('FormData entries:');
                for (let pair of formData.entries()) {
                    console.log(pair[0], pair[1]);
                }

            try {
                const response = await axios.post('/add-case-stl/<%= caseid %>', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                }).then(response => {
                   Toast.success(response.data.message);
                   setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                });
                
               
            } catch (error) {
                console.log('error', error);
                if (error.response) {
                    Toast.error(error.response.data.message || `Failed to ${status === '1' ? 'submit' : 'save'} STL`);
                } else {
                    Toast.error('Network error. Please try again.');
                }
            } finally {
                // Reset button state
                button.disabled = false;
                button.classList.remove('loading');
                button.textContent = originalText;
            }
        }

        // Form submission event listeners
        document.getElementById('submitBtn').addEventListener('click', async (e) => {
            e.preventDefault();
            await handleFormSubmission('1', e.target);
        });

        document.getElementById('saveDraftBtn').addEventListener('click', async (e) => {
            e.preventDefault();
            await handleFormSubmission('0', e.target);
        });

    </script>
</body>
</html>
