<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload STL - Doctor Portal</title>
    <link rel="stylesheet" href="/assets/css/side_menu.css">
    <link rel="stylesheet" href="/assets/css/add_case.css">
    <link rel="stylesheet" href="/assets/css/date-picker.css">
    <link rel="stylesheet" href="/assets/css/validation.css">
    <link rel="stylesheet" href="/assets/css/toast.css">
    <script src="/assets/js/components.js"></script>
    <script src="/assets/js/date-picker.js"></script>
</head>
<body>
    <!-- Navigation Rail Component -->
    <div id="navRail"></div>

    <!-- Main Content -->
    <main class="main-content">
        <div class="content-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/aligners-cases" class="breadcrumb-item">Home</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <span class="breadcrumb-item active">Upload STL</span>
            </nav>

            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Upload STL</h1>
            </div>

            <!-- Upload STL Form -->
            <form class="add-case-form" id="uploadStlForm">
                <!-- Patient Details Section -->
                <div class="form-section">
                    <h2 class="section-title">Patient Details</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="patientName">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Name</span>
                                </label>
                                <input type="text" id="patientName" name="patientName" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="patientGender">Gender</label>
                                <div class="select-wrapper">
                                    <select id="patientGender" name="patientGender">
                                        <option value="">Select</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                        <option value="Prefer not to say">Prefer not to say</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="dateOfBirth">Date of Birth</label>
                                <input type="date" id="dateOfBirth" name="dateOfBirth" data-date-picker>
                            </div>
                            <div class="form-field">
                                <label for="email">Email</label>
                                <input type="email" id="email" name="email" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="treatmentBrand">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Treatment Brand</span>
                                </label>
                                <div class="select-wrapper">
                                    <select id="treatmentBrand" name="treatmentBrand">
                                        <option value="">Select</option>
                                        <option value="DCA Pro">DCA Pro</option>
                                        <option value="Diamond Aligner">Diamond Aligner</option>
                                        <option value="OEM-Plain">OEM-Plain</option>
                                        <option value="OEM-Clinic Brand">OEM-Clinic Brand</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="customSN">Custom SN</label>
                                <input type="text" id="customSN" name="customSN" placeholder="Input here">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Model Upload Section -->
                <div class="form-section">
                    <h2 class="section-title">Model Upload</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="product">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Product</span>
                                </label>
                                <div class="select-wrapper">
                                    <select id="product" name="product">
                                        <option value="">Select</option>
                                        <option value="Clear Aligners 0.76mm">Clear Aligners 0.76mm</option>
                                        <option value="Retainer 1.0mm">Retainer 1.0mm</option>
                                        <option value="Retainer 1.3mm / Soft Nightguard 1.3mm">Retainer 1.3mm / Soft Nightguard 1.3mm</option>
                                        <option value="Soft Nightguard 2.0mm">Soft Nightguard 2.0mm</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="productArrivalDate">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Product Arrival Date</span>
                                    <span class="info-icon">
                                        <img src="/assets/images/info-icon.svg" alt="Info Icon">
                                        <div class="info-tooltip">
                                            <div class="tooltip-content">
                                                This is your preferred date to receive<br>
                                                the product. You can only select a<br>
                                                date that is at least 7 days from the<br>
                                                case creation date.
                                            </div>
                                        </div>
                                    </span>
                                </label>
                                <div class="date-wrapper">
                                    <input type="date" id="productArrivalDate" name="productArrivalDate" data-date-picker data-min-date="" data-placeholder="Select">
                                </div>
                            </div>
                        </div>

                        <div class="form-field">
                            <label for="modelType">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Model Type</span>
                            </label>
                            <div class="select-wrapper">
                                <select id="modelType" name="modelType">
                                    <option value="">Select</option>
                                    <option value="Digital Model">Digital Model</option>
                                    <option value="Plaster Model">Plaster Model</option>
                                </select>
                            </div>
                        </div>

                        <!-- Documents Upload -->
                        <div class="upload-field full-width">
                            <label for="documents">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Documents (*STL, PLY or ZIP)</span>
                            </label>
                            <p class="upload-instructions">Upload one or multiple attachments.</p>
                            <div class="file-upload file-upload-simple">
                                <input type="file" id="documents" name="documents" accept=".stl,.ply,.zip" multiple>
                                <div class="upload-placeholder">
                                    <span>Choose Files</span>
                                    <img src="/assets/images/file-upload.png" alt="Upload Icon" class="file-upload-icon">
                                </div>
                            </div>
                            <!-- File List Display -->
                            <div class="uploaded-files-list" id="uploadedFilesList" style="display: none;">
                                <div class="files-container" id="filesContainer">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="saveDraftBtn">Save as Draft</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Submit</button>
                </div>
            </form>
        </div>
    </main>
    <script src="/assets/js/jquery.js"></script>
    <script src="/assets/js/axios.min.js"></script>
    <script src="/assets/js/toast.js"></script>
    <script>
        // Load navigation rail component
        document.addEventListener('DOMContentLoaded', () => {
            loadComponent('navRail', '/components/side-menu');
            
            // Initialize custom date pickers
            //initializeCustomDatePickers();
        });
        
        // function initializeCustomDatePickers() {
        //     // Set minimum date for product arrival date (7 days from today)
        //     const today = new Date();
        //     const minDate = new Date(today);
        //     minDate.setDate(today.getDate() + 7);
            
        //     const productArrivalInput = document.getElementById('productArrivalDate');
        //     if (productArrivalInput) {
        //         productArrivalInput.setAttribute('data-min-date', minDate.toISOString().split('T')[0]);
        //     }
            
        //     // Initialize all date pickers
        //     initializeDatePickers('[data-date-picker]');
        // }

        // File upload handling - Multi-file support
        let uploadedFiles = [];
        
        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // Helper function to get file icon based on extension
        function getFileIcon(filename) {
            const ext = filename.split('.').pop().toLowerCase();
            return '/assets/images/document-icon.svg'; // Using existing document icon
        }
        
        // Helper function to add file to the list
        function addFileToList(file) {
            const fileId = 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            const fileData = {
                id: fileId,
                file: file,
                name: file.name,
                size: file.size,
                type: file.type
            };
            
            uploadedFiles.push(fileData);
            renderFilesList();
            updateUploadPlaceholder();
        }
        
        // Helper function to remove file from the list
        function removeFileFromList(fileId) {
            uploadedFiles = uploadedFiles.filter(f => f.id !== fileId);
            renderFilesList();
            updateUploadPlaceholder();
        }
        
        // Helper function to render files list
        function renderFilesList() {
            const filesContainer = document.getElementById('filesContainer');
            const uploadedFilesList = document.getElementById('uploadedFilesList');
            
            if (uploadedFiles.length === 0) {
                uploadedFilesList.style.display = 'none';
                return;
            }
            
            uploadedFilesList.style.display = 'block';
            
            filesContainer.innerHTML = uploadedFiles.map(fileData => `
                <div class="file-item" data-file-id="${fileData.id}">
                    <div class="file-info">
                        <img src="${getFileIcon(fileData.name)}" alt="File" class="file-icon">
                        <p class="file-name">${fileData.name}</p>
                    </div>
                    <button type="button" class="cancel-upload" onclick="removeFileFromList('${fileData.id}')">
                        <img src="/assets/images/cancel-file-upload.svg" alt="Remove file">
                    </button>
                </div>
            `).join('');
        }
        
        // Helper function to update upload placeholder text
        function updateUploadPlaceholder() {
            const uploadPlaceholder = document.querySelector('.upload-placeholder');
            const firstSpan = uploadPlaceholder.querySelector('span:first-child');
            
            // if (uploadedFiles.length === 0) {
            //     firstSpan.textContent = 'Choose File';
            //     document.querySelector('.file-upload').classList.remove('has-file');
            // } else {
            //     firstSpan.textContent = `${uploadedFiles.length} file(s) selected`;
            //     document.querySelector('.file-upload').classList.add('has-file');
            // }
        }
        
        // File input change handler - Multiple file upload
        document.getElementById('documents').addEventListener('change', function(e) {
            const input = e.target;
            
            if (input.files.length > 0) {
                // Process all selected files
                Array.from(input.files).forEach(file => {
                    // Check if file already exists (by name and size)
                    const exists = uploadedFiles.some(f => f.name === file.name && f.size === file.size);
                    if (!exists) {
                        addFileToList(file);
                    }
                });
            }
            
            // Clear the input using requestAnimationFrame to ensure it happens after current processing
            requestAnimationFrame(() => {
                input.value = '';
            });
        });

        // Drag and drop functionality for file upload
        const fileUpload = document.querySelector('.file-upload');
        const fileInput = document.getElementById('documents');

        fileUpload.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUpload.classList.add('drag-over');
        });

        fileUpload.addEventListener('dragleave', () => {
            fileUpload.classList.remove('drag-over');
        });

        fileUpload.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUpload.classList.remove('drag-over');
            
            if (e.dataTransfer.files.length > 0) {
                // Process all dropped files
                Array.from(e.dataTransfer.files).forEach(file => {
                    // Check if file already exists (by name and size)
                    const exists = uploadedFiles.some(f => f.name === file.name && f.size === file.size);
                    if (!exists) {
                        addFileToList(file);
                    }
                });
            }
        });

        // Form submission
        document.getElementById('uploadStlForm').addEventListener('submit', async (e) => {
            e.preventDefault();

               // Clear any existing validation errors
            formValidation.clearAllValidation('uploadStlForm');
            formValidation.clearFormError('uploadStlForm');

              // Define validation rules
              const validations = [
                {
                    field: 'patientName',
                    rule: 'required',
                    message: 'Name is required.'
                },
                {
                    field: 'treatmentBrand',
                    rule: 'required',
                    message: 'Treatment Brand is required.'
                },
                {
                    field: 'product',
                    rule: 'required',
                    message: 'Product is required.'
                },
                {
                    field: 'productArrivalDate',
                    rule: 'required',
                    message: 'Product Arrival Date is required.'
                },
                {
                    field: 'modelType',
                    rule: 'required',
                    message: 'Model Type is required.'
                },
                
            ];

             // Validate all fields
             const isValid = formValidation.validateFields(validations);

            if (!isValid) {
                return;
            }
            
            
            // Disable submit button and show loading state
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.classList.add('loading');
            submitBtn.textContent = 'Submitting Case...';

            const formData = new FormData();
            formData.append('name', document.getElementById('patientName').value);
            formData.append('gender', document.getElementById('patientGender').value);
            formData.append('email', document.getElementById('email').value);
            formData.append('dob', document.getElementById('dateOfBirth').value);
            formData.append('treatment_brand', document.getElementById('treatmentBrand').value);
            formData.append('custom_sn', document.getElementById('customSN').value);
            formData.append('product', document.getElementById('product').value);
            formData.append('product_arrival_date', document.getElementById('productArrivalDate').value);
            formData.append('model_type', document.getElementById('modelType').value);
            
            // Add uploaded files
            uploadedFiles.forEach((fileData, index) => {
                formData.append('documents', fileData.file);
            });
            formData.append('status', '0'); // 0 = draft
            formData.append('category', 'Upload STL');
            try {
                const response = await axios.post('/add-case-stl', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                }).then(response => {
                    // Redirect to cases list with success message
                    window.location.href = `/aligners-cases?success=${encodeURIComponent(response.data.message)}`;
                })
                .catch(error => {
                    // Show error message
                    console.log('error', error);
                    Toast.error('Failed to upload STL. Please try again.');
                    return;
                });
            } catch (error) {
                if (error.response) {
                    Toast.error(error.response.data.message || 'Failed to upload STL');
                } else {
                    Toast.error('Network error. Please try again.');
                }
            } finally {
                // Reset submit button
                submitBtn.disabled = false;
                submitBtn.classList.remove('loading');
                submitBtn.textContent = originalText;
            }
        });

        // Save as draft
        document.getElementById('saveDraftBtn').addEventListener('click', async () => {
            const formData = new FormData();
            formData.append('name', document.getElementById('patientName').value);
            formData.append('gender', document.getElementById('patientGender').value);
            formData.append('email', document.getElementById('email').value);
            formData.append('dob', document.getElementById('dateOfBirth').value);
            formData.append('treatment_brand', document.getElementById('treatmentBrand').value);
            formData.append('custom_sn', document.getElementById('customSN').value);
            formData.append('product', document.getElementById('product').value);
            formData.append('product_arrival_date', document.getElementById('productArrivalDate').value);
            formData.append('model_type', document.getElementById('modelType').value);
            formData.append('status', '0'); // 0 = draft
            formData.append('category', 'Upload STL');
            
            // Add uploaded files
            uploadedFiles.forEach((fileData, index) => {
                formData.append('documents', fileData.file);
            });
            
            try {
                const response = await fetch('/save-stl-draft', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    alert('Draft saved successfully!');
                } else {
                    const data = await response.json();
                    alert(data.message || 'Failed to save draft');
                }
            } catch (error) {
                alert('Network error. Please try again.');
            }
        });
    </script>
</body>
</html>
