<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update User - Express Portal</title>
    <link rel="stylesheet" href="/assets/css/side_menu.css">
    <link rel="stylesheet" href="/assets/css/create_user.css">
    <link rel="stylesheet" href="/assets/css/validation.css">
    <link rel="stylesheet" href="/assets/css/toast.css">
    <link rel="stylesheet" href="/assets/css/custom-select.css">
    <script src="/assets/js/components.js"></script>
    <script src="/assets/js/custom-select.js"></script>
</head>
<body>
    <!-- Navigation Rail Component -->
    <div id="navRail"></div>
    <!-- Main Content -->
    <main class="main-content">
        <div class="content-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/aligners-cases" class="breadcrumb-item">Home</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <a href="/user-management" class="breadcrumb-item">User Management</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <a href="/user-details/<%= user.id %>" class="breadcrumb-item">User Details</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <span class="breadcrumb-item active">Update Profile</span>
            </nav>

            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Update Profile</h1>
                <div class="page-actions">
                    <% if (user.status === 'active') { %>
                        <button class="btn btn-deactivate" id="deactivateBtn">Deactivate User</button>
                    <% } else { %>
                        <button class="btn btn-deactivate" id="deleteBtn">Delete User</button>
                    <% } %>
                </div>
            </div>

            <!-- Create User Form -->
            <form class="create-user-form" id="updateUserForm">
                <!-- Personal Details Section -->
                <div class="form-section">
                    <h2 class="section-title">Personal Details</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="username">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Username</span>
                                </label>
                                <input type="text" id="username" name="username" placeholder="Input here" value="<%= user.username %>">
                            </div>
                            <div class="form-field">
                                <label for="fullName">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Full Name</span>
                                </label>
                                <input type="text" id="fullName" name="fullName" placeholder="Input here" value="<%= user.fullName %>">
                            </div>
                            <div class="form-field">
                                <label for="email">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Email</span>
                                </label>
                                <input type="email" id="email" name="email" placeholder="Input here" value="<%= user.email %>">
                            </div>
                            <div class="form-field">
                                <label for="phoneNumber">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Phone Number</span>
                                </label>
                                <input type="tel" id="phoneNumber" name="phoneNumber" placeholder="Input here" value="<%= user.phoneNumber %>">
                            </div>
                            <div class="form-field">
                                <label for="country">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Country</span>
                                </label>
                                <div class="custom-select-wrapper">
                                    <div class="custom-select" id="country-select">
                                        <div class="custom-select__trigger">
                                            <span class="custom-select__placeholder"><%= user.country || 'Select' %></span>
                                            <div class="custom-select__arrow">
                                                <img src="/assets/images/select-icon.svg" alt="Select Arrow">
                                            </div>
                                        </div>
                                        <div class="custom-select__options">
                                            <span class="custom-select__option" data-value="Malaysia">Malaysia</span>
                                            <span class="custom-select__option" data-value="Singapore">Singapore</span>
                                            <span class="custom-select__option" data-value="Thailand">Thailand</span>
                                        </div>
                                    </div>
                                    <select id="country" name="country" style="display: none;">
                                        <option value="">Select</option>
                                        <option value="Malaysia" <%= user.country === 'Malaysia' ? 'selected' : '' %>>Malaysia</option>
                                        <option value="Singapore" <%= user.country === 'Singapore' ? 'selected' : '' %>>Singapore</option>
                                        <option value="Thailand" <%= user.country === 'Thailand' ? 'selected' : '' %>>Thailand</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="clinic">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Clinic</span>
                                </label>
                                <input type="text" id="clinic" name="clinic" placeholder="Input here" value="<%= user.clinic %>">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Delivery Address Section -->
                <div class="form-section">
                    <h2 class="section-title">Delivery Address</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="address">Address</label>
                                <input type="text" id="address" name="address" placeholder="Input here" value="<%= user.address %>">
                            </div>
                            <div class="form-field">
                                <label for="postcode">Postcode</label>
                                <input type="text" id="postcode" name="postcode" placeholder="Input here" value="<%= user.postcode %>">
                            </div>
                            <div class="form-field">
                                <label for="city">City</label>
                                <input type="text" id="city" name="city" placeholder="Input here" value="<%= user.city %>">
                            </div>
                            <div class="form-field">
                                <label for="state">State</label>
                                <div class="custom-select-wrapper">
                                    <div class="custom-select" id="state-select">
                                        <div class="custom-select__trigger">
                                            <span class="custom-select__placeholder"><%= user.state || 'Select' %></span>
                                            <div class="custom-select__arrow">
                                                <img src="/assets/images/select-icon.svg" alt="Select Arrow">
                                            </div>
                                        </div>
                                        <div class="custom-select__options">
                                            <span class="custom-select__option" data-value="Selangor">Selangor</span>
                                            <span class="custom-select__option" data-value="Kuala Lumpur">Kuala Lumpur</span>
                                            <span class="custom-select__option" data-value="Penang">Penang</span>
                                            <span class="custom-select__option" data-value="Johor">Johor</span>
                                            <span class="custom-select__option" data-value="Perak">Perak</span>
                                            <span class="custom-select__option" data-value="Kedah">Kedah</span>
                                            <span class="custom-select__option" data-value="Kelantan">Kelantan</span>
                                            <span class="custom-select__option" data-value="Terengganu">Terengganu</span>
                                            <span class="custom-select__option" data-value="Pahang">Pahang</span>
                                            <span class="custom-select__option" data-value="Negeri Sembilan">Negeri Sembilan</span>
                                            <span class="custom-select__option" data-value="Melaka">Melaka</span>
                                            <span class="custom-select__option" data-value="Perlis">Perlis</span>
                                            <span class="custom-select__option" data-value="Sabah">Sabah</span>
                                            <span class="custom-select__option" data-value="Sarawak">Sarawak</span>
                                            <span class="custom-select__option" data-value="Other">Other</span>
                                        </div>
                                    </div>
                                    <select id="state" name="state" style="display: none;">
                                        <option value="">Select</option>
                                        <option value="Selangor" <%= user.state === 'Selangor' ? 'selected' : '' %>>Selangor</option>
                                        <option value="Kuala Lumpur" <%= user.state === 'Kuala Lumpur' ? 'selected' : '' %>>Kuala Lumpur</option>
                                        <option value="Penang" <%= user.state === 'Penang' ? 'selected' : '' %>>Penang</option>
                                        <option value="Johor" <%= user.state === 'Johor' ? 'selected' : '' %>>Johor</option>
                                        <option value="Perak" <%= user.state === 'Perak' ? 'selected' : '' %>>Perak</option>
                                        <option value="Kedah" <%= user.state === 'Kedah' ? 'selected' : '' %>>Kedah</option>
                                        <option value="Kelantan" <%= user.state === 'Kelantan' ? 'selected' : '' %>>Kelantan</option>
                                        <option value="Terengganu" <%= user.state === 'Terengganu' ? 'selected' : '' %>>Terengganu</option>
                                        <option value="Pahang" <%= user.state === 'Pahang' ? 'selected' : '' %>>Pahang</option>
                                        <option value="Negeri Sembilan" <%= user.state === 'Negeri Sembilan' ? 'selected' : '' %>>Negeri Sembilan</option>
                                        <option value="Melaka" <%= user.state === 'Melaka' ? 'selected' : '' %>>Melaka</option>
                                        <option value="Perlis" <%= user.state === 'Perlis' ? 'selected' : '' %>>Perlis</option>
                                        <option value="Sabah" <%= user.state === 'Sabah' ? 'selected' : '' %>>Sabah</option>
                                        <option value="Sarawak" <%= user.state === 'Sarawak' ? 'selected' : '' %>>Sarawak</option>
                                        <option value="Other" <%= user.state === 'Other' ? 'selected' : '' %>>Other</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Role Access Section -->
                <div class="form-section">
                    <h2 class="section-title">Role Access</h2>
                    <div class="form-content">
                        <div class="form-field">
                            <label for="role">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Role</span>
                            </label>
                            <div class="role-selection" id="roleSelection">
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="doctor" <%= user.role === 'doctor' ? 'checked' : '' %>>
                                        <span class="radio-custom"></span>
                                        Doctor
                                    </label>
                                </div>
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="staff" <%= user.role === 'staff' ? 'checked' : '' %>>
                                        <span class="radio-custom"></span>
                                        Staff
                                    </label>
                                </div>
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="superadmin" <%= user.role === 'superadmin' ? 'checked' : '' %>>
                                        <span class="radio-custom"></span>
                                        Superadmin
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Save</button>
                </div>
            </form>
        </div>
    </main>

    <!-- Deactivate User Modal -->
    <div class="modal-overlay" id="deactivateModal">
        <div class="modal-dialog">
            <div class="modal-header">
                <h3 class="modal-title">Confirm to Deactivate?</h3>
                <button class="modal-close" id="closeModal">
                    <img src="/assets/images/x-icon.svg" alt="Close">
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-message">User will not be able to access the features once the account is deactivated.</p>
            </div>
            <div class="modal-actions">
                <button class="modal-btn modal-btn-cancel" id="cancelDeactivate">Cancel</button>
                <button class="modal-btn modal-btn-confirm" id="confirmDeactivate">Yes, Deactivate</button>
            </div>
        </div>
    </div>

    <!-- Delete User Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal-dialog">
            <div class="modal-header">
                <h3 class="modal-title">Confirm to Delete?</h3>
                <button class="modal-close" id="closeModal">
                    <img src="/assets/images/x-icon.svg" alt="Close">
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-message">You will not be able to recover this user once it is deleted.</p>
            </div>
            <div class="modal-actions">
                <button class="modal-btn modal-btn-cancel" id="cancelDelete">Cancel</button>
                <button class="modal-btn modal-btn-confirm" id="confirmDelete">Yes, Delete</button>
            </div>
        </div>
    </div>
    <script src="/assets/js/jquery.js"></script>
    <script src="/assets/js/axios.min.js"></script>
    <script src="/assets/js/toast.js"></script>
    <script>
        // Helper function to capitalize first letter of every word
        function capitalizeWords(str) {
            if (!str) return str;
            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
        }
        
        // Load navigation rail component
        document.addEventListener('DOMContentLoaded', () => {
            loadComponent('navRail', '/components/side-menu');
            
            // Initialize custom select dropdowns with pre-selected values
            setTimeout(() => {
                if (window.customSelect) {
                    // Set initial values for custom selects using the new method
                    const selects = [
                        { id: 'country', value: '<%= user.country %>' },
                        { id: 'state', value: '<%= user.state %>' }
                    ];
                    
                    selects.forEach(select => {
                        window.customSelect.setValueFromData(select.id, select.value);
                    });
                }
                
                // Capitalize first letter of country and state placeholders
                const capitalizeFirstLetter = (str) => {
                    if (!str || str === 'Select') return str;
                    return str.charAt(0).toUpperCase() + str.slice(1);
                };
                
                // Apply capitalization to placeholders
                const countryPlaceholder = document.querySelector('#country-select .custom-select__placeholder');
                const statePlaceholder = document.querySelector('#state-select .custom-select__placeholder');
                
                if (countryPlaceholder && countryPlaceholder.textContent !== 'Select') {
                    countryPlaceholder.textContent = capitalizeFirstLetter(countryPlaceholder.textContent);
                }
                
                if (statePlaceholder && statePlaceholder.textContent !== 'Select') {
                    statePlaceholder.textContent = capitalizeFirstLetter(statePlaceholder.textContent);
                }
            }, 100);
        });

        // Password toggle functionality
        document.querySelectorAll('.password-toggle').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                const eyeIcon = this.querySelector('.eye-icon');
                
                if (input.type === 'password') {
                    input.type = 'text';
                    eyeIcon.src = '/assets/images/eye-closed-icon.svg';
                } else {
                    input.type = 'password';
                    eyeIcon.src = '/assets/images/eye-icon.svg';
                }
            });
        });

        // Form submission with universal validation
        document.getElementById('updateUserForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Clear any existing validation errors
            formValidation.clearAllValidation('updateUserForm');
            formValidation.clearFormError('updateUserForm');
            
            // Define validation rules
            const validations = [
                {
                    field: 'username',
                    rule: 'required',
                    message: 'Username is required.'
                },
                {
                    field: 'fullName',
                    rule: 'required',
                    message: 'Full Name is required.'
                },
                {
                    field: 'email',
                    rule: ['required', 'email'],
                    message: 'Email is required.'
                },
                {
                    field: 'phoneNumber',
                    rule: ['required', 'phone'],
                    message: 'Phone number is required.'
                },
                {
                    field: 'country',
                    rule: 'required',
                    message: 'Country is required.'
                },
                {
                    field: 'clinic',
                    rule: 'required',
                    message: 'Clinic is required.'
                },
                {
                    field: document.querySelector('input[name="role"]'),
                    rule: 'radio',
                    message: 'Role is required.'
                }
            ];
            
            // Validate all fields
            const isValid = formValidation.validateFields(validations);
            
            if (!isValid) {
                return;
            }
            
            // Disable submit button and show loading state
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.classList.add('loading');
            submitBtn.textContent = 'Updating User...';

            const formData = {
                userId: '<%= user.id %>',
                username: document.getElementById('username').value,
                fullName: document.getElementById('fullName').value,
                email: document.getElementById('email').value,
                phoneNumber: document.getElementById('phoneNumber').value,
                country: document.getElementById('country').value,
                clinic: document.getElementById('clinic').value,
                address: document.getElementById('address').value,
                postcode: document.getElementById('postcode').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                role: document.querySelector('input[name="role"]:checked').value
            };
            
            try {
                const response = await axios.put('/update-user', formData)
                .then(response => {
                    if (response.status === 200) {
                        // Redirect to user details page with success message
                        window.location.href = `/user-details/${formData.userId}?success=${encodeURIComponent(response.data.message)}`;
                    } else {
                        Toast.error(response.data.message || 'Failed to update user');
                    }
                });
            } catch (error) {
                console.error('Error updating user:', error);
               Toast.error('Network error. Please check your connection and try again.');
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.classList.remove('loading');
                submitBtn.textContent = originalText;
            }
        });

        // Cancel button
        document.getElementById('cancelBtn').addEventListener('click', () => {
            window.location.href = `/user-details/<%= user.id %>`;
        });

        // Modal functionality
        const modal = document.getElementById('deactivateModal');
        const deactivateBtn = document.getElementById('deactivateBtn');
        const closeModal = document.getElementById('closeModal');
        const cancelDeactivate = document.getElementById('cancelDeactivate');
        const confirmDeactivate = document.getElementById('confirmDeactivate');
        const deleteBtn = document.getElementById('deleteBtn');
        const cancelDelete = document.getElementById('cancelDelete');
        const confirmDelete = document.getElementById('confirmDelete');

        if('<%= user.status %>' === 'active') {
            // Show modal when deactivate button is clicked
            deactivateBtn.addEventListener('click', () => {
                modal.classList.add('show');
            });

             // Close modal functions
            function closeModalDialog() {
                modal.classList.remove('show');
            }

            // Close modal when clicking close button, cancel button, or outside modal
            closeModal.addEventListener('click', closeModalDialog);
            cancelDeactivate.addEventListener('click', closeModalDialog);
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModalDialog();
                }
            });

            // Handle deactivate confirmation
            confirmDeactivate.addEventListener('click', async () => {
                const formData = {
                        userId: '<%= user.id %>'
                    }
                    const response = await axios.post('/deactivate-user', formData)
                    .then(response => {
                        // Redirect to user details page with success message
                        window.location.href = `/user-details/${formData.userId}?success=${encodeURIComponent(response.data.message)}`;
                    }).catch(error => {
                        console.error(error);
                        if (error.response && error.response.data && error.response.data.message) {
                            Toast.error(error.response.data.message);
                        } else {
                            Toast.error('Network error. Please try again.');
                        }
                    });
            });

             // Close modal with Escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && modal.classList.contains('show')) {
                    closeModalDialog();
                }
            });
        }

        if('<%= user.status %>' === 'inactive') {
            // Handle delete confirmation
            confirmDelete.addEventListener('click', async () => {
                const formData = {
                        userId: '<%= user.id %>'
                    }
                    const response = await axios.post('/delete-user', formData)
                    .then(response => {
                        // Redirect to user management page with success message
                        window.location.href = `/user-management?success=${encodeURIComponent(response.data.message)}`;
                    }).catch(error => {
                        console.error(error);
                        if (error.response && error.response.data && error.response.data.message) {
                            Toast.error(error.response.data.message);
                        } else {
                            Toast.error('Network error. Please try again.');
                        }
                    });
            });

            // Show modal when delete button is clicked
            deleteBtn.addEventListener('click', () => {
                deleteModal.classList.add('show');
            });

            // Close modal functions
            function closeDeleteModalDialog() {
                deleteModal.classList.remove('show');
            }

            // Close modal when clicking close button, cancel button, or outside modal
            closeModal.addEventListener('click', closeModalDialog);
            cancelDelete.addEventListener('click', closeModalDialog);
            deleteModal.addEventListener('click', (e) => {
                if (e.target === deleteModal) {
                    closeDeleteModalDialog();
                }
            });

             // Close modal with Escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && deleteModal.classList.contains('show')) {
                    closeDeleteModalDialog();
                }
            });
        }
    </script>
</body>
</html>