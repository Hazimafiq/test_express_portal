<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universal Validation System Test</title>
    <link rel="stylesheet" href="/assets/css/create_user.css">
    <script src="/assets/js/components.js"></script>
    <style>
        body { padding: 2rem; max-width: 600px; margin: 0 auto; }
        .demo-section { margin-bottom: 2rem; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 8px; }
        .demo-buttons { display: flex; gap: 1rem; margin-top: 1rem; flex-wrap: wrap; }
        .demo-btn { padding: 8px 16px; border: 1px solid #d1d5db; border-radius: 6px; background: white; cursor: pointer; font-size: 14px; }
        .demo-btn:hover { background: #f9fafb; }
    </style>
</head>
<body>
    <h1>Universal Form Validation System Demo</h1>
    
    <div class="demo-section">
        <h2>Individual Field Testing</h2>
        <div class="form-field">
            <label for="testField">Test Field</label>
            <input type="text" id="testField" placeholder="Type something...">
        </div>
        
        <div class="demo-buttons">
            <button class="demo-btn" onclick="showError()">Show Error</button>
            <button class="demo-btn" onclick="showSuccess()">Show Success</button>
            <button class="demo-btn" onclick="clearValidation()">Clear</button>
        </div>
    </div>

    <div class="demo-section">
        <h2>Complete Form Example</h2>
        <form id="demoForm" class="create-user-form">
            <div class="form-section">
                <h3 class="section-title">Demo Form</h3>
                <div class="form-content">
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="demoName">* Name</label>
                            <input type="text" id="demoName" name="name" placeholder="Enter your name" >
                        </div>
                        <div class="form-field">
                            <label for="demoEmail">* Email</label>
                            <input type="email" id="demoEmail" name="email" placeholder="Enter your email" required>
                        </div>
                        <div class="form-field">
                            <label for="demoPhone">* Phone</label>
                            <input type="tel" id="demoPhone" name="phone" placeholder="10-digit phone number" required>
                        </div>
                        <div class="form-field">
                            <label for="demoCountry">* Country</label>
                            <select id="demoCountry" name="country">
                                <option value="">Select Country</option>
                                <option value="malaysia">Malaysia</option>
                                <option value="singapore">Singapore</option>
                                <option value="thailand">Thailand</option>
                            </select>
                        </div>
                        <div class="form-field">
                            <label>* Role</label>
                            <div class="role-selection">
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="demoRole" value="admin">
                                        <span class="radio-custom"></span>
                                        Admin
                                    </label>
                                </div>
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="demoRole" value="user">
                                        <span class="radio-custom"></span>
                                        User
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="resetForm()">Reset</button>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </form>
    </div>

    <div class="demo-section">
        <h2>Form-Level Messages</h2>
        <div class="demo-buttons">
            <button class="demo-btn" onclick="showFormError()">Show Form Error</button>
            <button class="demo-btn" onclick="showFormSuccess()">Show Form Success</button>
            <button class="demo-btn" onclick="clearFormMessages()">Clear Messages</button>
            <button class="demo-btn" onclick="validateAllRequired()">Validate All Required</button>
        </div>
    </div>

    <script>
        // Wait for FormValidation to load
        document.addEventListener('DOMContentLoaded', function() {
            // Individual field demo functions
            window.showError = () => {
                const field = document.getElementById('testField');
                const message = field.value || 'This field has an error!';
                formValidation.showError('testField', `Error: ${message}`);
            };

            window.showSuccess = () => {
                const field = document.getElementById('testField');
                const message = field.value || 'success';
                formValidation.showSuccess('testField', `Great! ${message} is valid.`);
            };

            window.clearValidation = () => {
                formValidation.clearValidation('testField');
            };

            // Form-level demo functions
            window.showFormError = () => {
                formValidation.showFormError('demoForm', 'This is a form-level error message!');
            };

            window.showFormSuccess = () => {
                formValidation.clearFormError('demoForm');
                const successMsg = document.createElement('div');
                successMsg.className = 'form-success-message';
                successMsg.textContent = 'Form submitted successfully!';
                document.getElementById('demoForm').insertBefore(successMsg, document.getElementById('demoForm').firstChild);
            };

            window.clearFormMessages = () => {
                formValidation.clearFormError('demoForm');
                const successMsg = document.querySelector('.form-success-message');
                if (successMsg) successMsg.remove();
            };

            window.resetForm = () => {
                document.getElementById('demoForm').reset();
                formValidation.clearAllValidation('demoForm');
                clearFormMessages();
            };

            window.validateAllRequired = () => {
                formValidation.clearAllValidation('demoForm');
                const isValid = formValidation.validateRequiredFields('demoForm');
                if (!isValid) {
                    formValidation.showFormError('demoForm', 'Please fill in all required fields.');
                } else {
                    showFormSuccess();
                }
            };

            // Demo form submission
            document.getElementById('demoForm').addEventListener('submit', (e) => {
                e.preventDefault();

                // Clear existing validation
                formValidation.clearAllValidation('demoForm');
                formValidation.clearFormError('demoForm');

                // Define validation rules
                const validations = [
                    {
                        field: 'demoName',
                        rule: 'required',
                        message: 'Name is required.'
                    },
                    {
                        field: 'demoEmail',
                        rule: ['required', 'email'],
                        message: 'Email is required and must be valid.'
                    },
                    {
                        field: 'demoPhone',
                        rule: ['required', 'phone'],
                        message: 'Phone number is required and must be 10-15 digits.'
                    },
                    {
                        field: 'demoCountry',
                        rule: 'required',
                        message: 'Please select a country.'
                    },
                    {
                        field: document.querySelector('input[name="demoRole"]'),
                        rule: 'radio',
                        message: 'Please select a role.'
                    }
                ];

                // Validate all fields
                const isValid = formValidation.validateFields(validations);

                if (!isValid) {
                    formValidation.showFormError('demoForm', 'Please correct the errors below and try again.');
                    return;
                }

                // Show success
                showFormSuccess();
            });

            // Real-time validation for demo
            document.getElementById('demoEmail').addEventListener('blur', function() {
                if (this.value && !formValidation.isValidEmail(this.value)) {
                    formValidation.showError(this, 'Please enter a valid email address.');
                } else if (this.value) {
                    formValidation.clearValidation(this);
                }
            });

            document.getElementById('demoPhone').addEventListener('blur', function() {
                if (this.value && !/^\d{10}$/.test(this.value.replace(/\D/g, ''))) {
                    formValidation.showError(this, 'Phone number must be 10 digits.');
                } else if (this.value) {
                    formValidation.clearValidation(this);
                }
            });

            // Clear form errors when user starts typing
            document.querySelectorAll('#demoForm input, #demoForm select').forEach(field => {
                field.addEventListener('input', () => {
                    const formError = document.querySelector('.form-error-message');
                    if (formError) formError.remove();
                });
            });
        });
    </script>
</body>
</html>
