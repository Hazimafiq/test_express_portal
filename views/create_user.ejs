<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create User - Express Portal</title>
    <link rel="stylesheet" href="/assets/css/side_menu.css">
    <link rel="stylesheet" href="/assets/css/create_user.css">
    <link rel="stylesheet" href="/assets/css/validation.css">
    <link rel="stylesheet" href="/assets/css/toast.css">
    <link rel="stylesheet" href="/assets/css/custom-select.css">
    <script src="/assets/js/components.js"></script>
    <script src="/assets/js/custom-select.js"></script>
</head>
<body>
    <!-- Navigation Rail Component -->
    <div id="navRail"></div>
    <!-- Main Content -->
    <main class="main-content">
        <div class="content-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/aligners-cases" class="breadcrumb-item">Home</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <a href="/user-management" class="breadcrumb-item">User Management</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <span class="breadcrumb-item active">Create User</span>
            </nav>

            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Create User</h1>
            </div>

            <!-- Create User Form -->
            <form class="create-user-form" id="createUserForm">
                <!-- Personal Details Section -->
                <div class="form-section">
                    <h2 class="section-title">Personal Details</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="username" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Username</span>
                                </label>
                                <input type="text" id="username" name="username" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="fullName" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Full Name</span>
                                </label>
                                <input type="text" id="fullName" name="fullName" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="email" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Email</span>
                                </label>
                                <input type="email" id="email" name="email" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="phoneNumber" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Phone Number</span>
                                </label>
                                <input type="tel" id="phoneNumber" name="phoneNumber" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="country" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Country</span>
                                </label>
                                <div class="custom-select-wrapper">
                                    <div class="custom-select" id="country-select">
                                        <div class="custom-select__trigger">
                                            <span class="custom-select__placeholder">Select</span>
                                            <div class="custom-select__arrow">
                                                <img src="/assets/images/select-icon.svg" alt="Select Arrow">
                                            </div>
                                        </div>
                                        <div class="custom-select__options">
                                            <span class="custom-select__option" data-value="Malaysia">Malaysia</span>
                                            <span class="custom-select__option" data-value="Singapore">Singapore</span>
                                            <span class="custom-select__option" data-value="Thailand">Thailand</span>
                                        </div>
                                    </div>
                                    <select id="country" name="country" style="display: none;">
                                        <option value="">Select</option>
                                        <option value="Malaysia">Malaysia</option>
                                        <option value="Singapore">Singapore</option>
                                        <option value="Thailand">Thailand</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-field">
                                <label for="clinic" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Clinic</span>
                                </label>
                                <input type="text" id="clinic" name="clinic" placeholder="Input here">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Delivery Address Section -->
                <div class="form-section">
                    <h2 class="section-title">Delivery Address</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label for="address">Address</label>
                                <input type="text" id="address" name="address" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="postcode">Postcode</label>
                                <input type="text" id="postcode" name="postcode" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="city">City</label>
                                <input type="text" id="city" name="city" placeholder="Input here">
                            </div>
                            <div class="form-field">
                                <label for="state">State</label>
                                <div class="custom-select-wrapper">
                                    <div class="custom-select" id="state-select">
                                        <div class="custom-select__trigger">
                                            <span class="custom-select__placeholder">Select</span>
                                            <div class="custom-select__arrow">
                                                <img src="/assets/images/select-icon.svg" alt="Select Arrow">
                                            </div>
                                        </div>
                                        <div class="custom-select__options">
                                            <span class="custom-select__option" data-value="Selangor">Selangor</span>
                                            <span class="custom-select__option" data-value="Kuala Lumpur">Kuala Lumpur</span>
                                            <span class="custom-select__option" data-value="Penang">Penang</span>
                                            <span class="custom-select__option" data-value="Johor">Johor</span>
                                            <span class="custom-select__option" data-value="Perak">Perak</span>
                                            <span class="custom-select__option" data-value="Kedah">Kedah</span>
                                            <span class="custom-select__option" data-value="Kelantan">Kelantan</span>
                                            <span class="custom-select__option" data-value="Terengganu">Terengganu</span>
                                            <span class="custom-select__option" data-value="Pahang">Pahang</span>
                                            <span class="custom-select__option" data-value="Negeri Sembilan">Negeri Sembilan</span>
                                            <span class="custom-select__option" data-value="Melaka">Melaka</span>
                                            <span class="custom-select__option" data-value="Perlis">Perlis</span>
                                            <span class="custom-select__option" data-value="Sabah">Sabah</span>
                                            <span class="custom-select__option" data-value="Sarawak">Sarawak</span>
                                            <span class="custom-select__option" data-value="Other">Other</span>
                                        </div>
                                    </div>
                                    <select id="state" name="state" style="display: none;">
                                        <option value="">Select</option>
                                        <option value="Selangor">Selangor</option>
                                        <option value="Kuala Lumpur">Kuala Lumpur</option>
                                        <option value="Penang">Penang</option>
                                        <option value="Johor">Johor</option>
                                        <option value="Perak">Perak</option>
                                        <option value="Kedah">Kedah</option>
                                        <option value="Kelantan">Kelantan</option>
                                        <option value="Terengganu">Terengganu</option>
                                        <option value="Pahang">Pahang</option>
                                        <option value="Negeri Sembilan">Negeri Sembilan</option>
                                        <option value="Melaka">Melaka</option>
                                        <option value="Perlis">Perlis</option>
                                        <option value="Sabah">Sabah</option>
                                        <option value="Sarawak">Sarawak</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Password Section -->
                <div class="form-section">
                    <h2 class="section-title">Password</h2>
                    <div class="form-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <div class="label-strength-row">
                                    <label for="password" class="form-label">
                                        <span class="required-asterisk">*</span>
                                        <span class="label-text">Password</span>
                                    </label>
                                    <div class="password-strength-container">
                                        <span class="password-strength" id="passwordStrength"></span>
                                    </div>
                                </div>
                                <div class="password-input-container">
                                    <input type="password" id="password" class="form-input password-input" name="password" placeholder="************">
                                    <button type="button" class="password-toggle" data-target="password">
                                        <img src="/assets/images/eye-icon.svg" alt="Toggle Password" class="eye-icon">
                                    </button>
                                </div>
                                <div class="password-strength-bars" id="passwordStrengthBars">
                                    <div class="strength-bar"></div>
                                    <div class="strength-bar"></div>
                                    <div class="strength-bar"></div>
                                </div>
                                <div class="custom-validation-message" id="passwordError"></div>
                            </div>
                            <div class="form-field">
                                <label for="confirmPassword" class="form-label">
                                    <span class="required-asterisk">*</span>
                                    <span class="label-text">Confirm Password</span>
                                </label>
                                <div class="password-input-container">
                                    <input type="password" id="confirmPassword" name="confirmPassword" placeholder="************">
                                    <button type="button" class="password-toggle" data-target="confirmPassword">
                                        <img src="/assets/images/eye-icon.svg" alt="Toggle Password" class="eye-icon">
                                    </button>
                                </div>
                                <!-- Confirm password validation message -->
                                <div class="custom-validation-message" id="confirmPasswordError"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Role Access Section -->
                <div class="form-section">
                    <h2 class="section-title">Role Access</h2>
                    <div class="form-content">
                        <div class="form-field">
                            <label for="role" class="form-label">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">Role</span>
                            </label>
                            <div class="role-selection" id="roleSelection">
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="doctor">
                                        <span class="radio-custom"></span>
                                        Doctor
                                    </label>
                                </div>
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="staff">
                                        <span class="radio-custom"></span>
                                        Staff
                                    </label>
                                </div>
                                <div class="role-option">
                                    <label class="radio-label">
                                        <input type="radio" name="role" value="superadmin">
                                        <span class="radio-custom"></span>
                                        Superadmin
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Submit</button>
                </div>
            </form>
        </div>
    </main>
    <script src="/assets/js/jquery.js"></script>
    <script src="/assets/js/axios.min.js"></script>
    <script src="/assets/js/toast.js"></script>
    <script>
        // Fix for custom select validation
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('custom-select__option')) {
                // When a custom select option is clicked, find the hidden select and clear validation errors
                const customSelect = e.target.closest('.custom-select');
                if (customSelect) {
                    const hiddenSelect = customSelect.parentNode.querySelector('select');
                    if (hiddenSelect) {
                        // Clear validation error if present
                        formValidation.clearValidation(hiddenSelect);
                    }
                }
            }
        });
        
        // Load navigation rail component
        document.addEventListener('DOMContentLoaded', () => {
            loadComponent('navRail', '/components/side-menu');
        });

        // Password toggle functionality
        document.querySelectorAll('.password-toggle').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                const eyeIcon = this.querySelector('.eye-icon');
                
                if (input.type === 'password') {
                    input.type = 'text';
                    eyeIcon.src = '/assets/images/eye-closed-icon.svg';
                } else {
                    input.type = 'password';
                    eyeIcon.src = '/assets/images/eye-icon.svg';
                }
            });
        });

        // Password validation functions
        function validatePassword(password) {
            const errors = [];
            
            if (password.length < 8) {
                errors.push('at least 8 characters');
            }
            if (!/(?=.*[0-9])/.test(password)) {
                errors.push('1 number');
            }
            if (!/(?=.*[!@#$%^&*])/.test(password)) {
                errors.push('1 special character');
            }
            if (!/(?=.*[A-Z])/.test(password)) {
                errors.push('1 uppercase');
            }
            if (!/(?=.*[a-z])/.test(password)) {
                errors.push('1 lowercase character');
            }
            
            return errors;
        }

        function getPasswordStrength(password) {
            const errors = validatePassword(password);
            
            // Weak: Missing 3 or more requirements
            if (errors.length >= 3) return 'weak';
            
            // Good: Missing 1-2 requirements OR all requirements met but less than 12 chars
            if (errors.length >= 1) return 'good';
            
            // At this point errors.length === 0 (all requirements met)
            if (password.length >= 12) return 'strong';
            return 'good';
        }

        function showValidationError(inputId, message) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            
            input.classList.add('error');
            if (errorElement) {
                // Set the base class first
                errorElement.className = 'custom-validation-message';
                errorElement.textContent = message;
                
                // Make sure we're not adding the 'show' class to any field-error-message
                const fieldErrorMessage = document.querySelector(`.field-error-message[data-for="${inputId}"]`);
                if (fieldErrorMessage) {
                    fieldErrorMessage.classList.remove('show');
                }
            }
        }

        function clearValidationError(inputId) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            
            // Remove all error-related classes
            input.classList.remove('error');
            input.classList.remove('field-error');
            
            if (errorElement) {
                errorElement.textContent = '';
                // Reset to base class and explicitly remove all error classes
                errorElement.className = 'custom-validation-message';
                errorElement.classList.remove('field-error-message');
                errorElement.classList.remove('show');
                
                // For validation.css compatibility
                const fieldErrorMessage = document.querySelector(`.field-error-message[data-for="${inputId}"]`);
                if (fieldErrorMessage) {
                    fieldErrorMessage.classList.remove('show');
                    fieldErrorMessage.textContent = '';
                }
            }
        }

        function showValidationMessage(inputId, message, type) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            console.log('errorElement', errorElement)
            input.classList.remove('error');
            if (errorElement) {
                console.log('errorElement2', errorElement)
                errorElement.textContent = message;
                errorElement.className = `custom-validation-message ${type}`;
            }
        }

        function clearPasswordValidation() {
            ['password', 'confirmPassword'].forEach(id => {
                clearValidationError(id);
            });
            
            // Clear password strength
            const strengthElement = document.getElementById('passwordStrength');
            const strengthBars = document.getElementById('passwordStrengthBars');
            strengthElement.textContent = '';
            strengthElement.className = 'password-strength';
            strengthBars.className = 'password-strength-bars';
            
            // Reset focus state and strength tracking
            isPasswordFocused = false;
            currentPasswordStrength = '';
        }

        // Track password input focus state and strength
        let isPasswordFocused = false;
        let currentPasswordStrength = '';

        // Real-time validation for password field
        const passwordInput = document.getElementById('password');
        
        passwordInput.addEventListener('focus', () => {
            isPasswordFocused = true;
            // Show strength indicators when focused
            updatePasswordStrengthVisibility();
        });

        passwordInput.addEventListener('blur', () => {
            isPasswordFocused = false;
            // Hide strength indicators if password is strong and unfocused
            updatePasswordStrengthVisibility();
        });

        function updatePasswordStrengthVisibility() {
            const strengthBars = document.getElementById('passwordStrengthBars');
            const validationMessage = document.getElementById('passwordError');
            
            // Hide validation message and strength bars if password is strong and input is not focused
            if (currentPasswordStrength === 'strong' && !isPasswordFocused) {
                validationMessage.textContent = '';
                validationMessage.className = 'custom-validation-message';
                strengthBars.className = 'password-strength-bars';
            } else if (currentPasswordStrength === 'strong' && isPasswordFocused) {
                // Show validation message and strength bars when focused and password is strong
                validationMessage.textContent = 'Your password is strongly secure and you are all set.';
                validationMessage.className = 'validation-message success';
                strengthBars.className = `password-strength-bars visible ${currentPasswordStrength}`;
            }
        }

        passwordInput.addEventListener('input', (e) => {
            const password = e.target.value;
            const strengthElement = document.getElementById('passwordStrength');
            const strengthBars = document.getElementById('passwordStrengthBars');
            
            if (password.length > 0) {
                const errors = validatePassword(password);
                const strength = getPasswordStrength(password);
                currentPasswordStrength = strength;
                
                // Always update strength indicator text
                strengthElement.textContent = strength.charAt(0).toUpperCase() + strength.slice(1);
                strengthElement.className = `password-strength ${strength}`;
                
                // Show strength bars normally, but they'll be hidden by updatePasswordStrengthVisibility if needed
                strengthBars.className = `password-strength-bars visible ${strength}`;

                // Show validation errors or success messages
                console.log('Password:', password, 'Errors:', errors, 'Strength:', strength); // Debug log
                
                // Show validation errors or success messages
                if (errors.length > 0 && strength === 'weak') {
                    // Dynamic error message showing only missing requirements
                    const message = `Password need to be ${errors.join(', ')}.`;
                    showValidationError('password', message);
                } else {
                    // Show success messages for good and strong passwords
                    if (strength === 'good') {
                        showValidationMessage('password', 'Your password meets all the necessary requirements. You can optionally lengthen it to make it stronger.', 'success');
                    } else if (strength === 'strong') {
                        // Handle strong password validation message based on focus
                        if (isPasswordFocused) {
                            showValidationMessage('password', 'Your password is strongly secure and you are all set.', 'success');
                        } else {
                            // Hide validation message when unfocused and strong
                            updatePasswordStrengthVisibility();
                        }
                    } else {
                        clearValidationError('password');
                    }
                }
            } else {
                currentPasswordStrength = '';
                strengthElement.textContent = '';
                strengthElement.className = 'password-strength';
                // Hide strength bars when password is empty
                strengthBars.className = 'password-strength-bars';
                clearValidationError('password');
            }
            
            // Re-validate confirm password if it has a value
            const confirmPassword = document.getElementById('confirmPassword').value;
            if (confirmPassword.length > 0) {
                validateConfirmPassword();
            }
        });

        function validateConfirmPassword() {
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const errorElement = document.getElementById('confirmPasswordError');
            
            if (confirmPassword.length > 0) {
                if (password !== confirmPassword) {
                    showValidationError('confirmPassword', 'Passwords do not match.');
                } else {
                    // Clear all validation error classes
                    confirmPasswordInput.classList.remove('error');
                    confirmPasswordInput.classList.remove('field-error');
                    
                    if (errorElement) {
                        errorElement.textContent = '';
                        errorElement.className = 'custom-validation-message';
                        // Remove any field-error-message class as well
                        errorElement.classList.remove('field-error-message');
                    }
                }
            }
        }

        // Add confirm password validation on input
        document.getElementById('confirmPassword').addEventListener('input', validateConfirmPassword);
        
        // Clear error when user focuses on confirm password field
        document.getElementById('confirmPassword').addEventListener('focus', function() {
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const errorElement = document.getElementById('confirmPasswordError');
            
            // Remove all error-related classes
            confirmPasswordInput.classList.remove('error');
            confirmPasswordInput.classList.remove('field-error');
            
            if (errorElement) {
                errorElement.textContent = '';
                errorElement.className = 'custom-validation-message';
                // Remove any field-error-message and show classes
                errorElement.classList.remove('field-error-message');
                errorElement.classList.remove('show');
            }
        });

        // Form submission with universal validation
        document.getElementById('createUserForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Clear any existing validation errors
            formValidation.clearAllValidation('createUserForm');
            formValidation.clearFormError('createUserForm');
            clearPasswordValidation();
            
            console.log('country value:', document.getElementById('country').value);
            // Define validation rules
            const validations = [
                {
                    field: 'username',
                    rule: 'required',
                    message: 'Username is required.'
                },
                {
                    field: 'fullName',
                    rule: 'required',
                    message: 'Full Name is required.'
                },
                {
                    field: 'email',
                    rule: ['required', 'email'],
                    message: 'Email is required.'
                },
                {
                    field: 'phoneNumber',
                    rule: ['required'],
                    message: 'Phone number is required.'
                },
                {
                    field: 'country',
                    rule: 'required',
                    message: 'Country is required.'
                },
                {
                    field: 'clinic',
                    rule: 'required',
                    message: 'Clinic is required.'
                },
                {
                    field: 'password',
                    rule: 'required',
                    message: 'Password is required.'
                },
                {
                    field: 'confirmPassword',
                    rule: 'required',
                    message: 'Confirm Password is required.'
                },
                {
                    field: document.querySelector('input[name="role"]'),
                    rule: 'radio',
                    message: 'Role is required.'
                }
            ];

            
            // Validate all fields
            const isValid = formValidation.validateFields(validations);
            
            // Additional password validation
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                showValidationError('confirmPassword', 'Passwords do not match.');
                
                // Add focus event listener to clear error when user focuses on the field again
                const confirmPasswordInput = document.getElementById('confirmPassword');
                const focusListener = function() {
                    const errorElement = document.getElementById('confirmPasswordError');
                    
                    // Remove all error-related classes
                    confirmPasswordInput.classList.remove('error');
                    confirmPasswordInput.classList.remove('field-error');
                    
                    if (errorElement) {
                        errorElement.textContent = '';
                        errorElement.className = 'custom-validation-message';
                        // Remove any field-error-message class as well
                        errorElement.classList.remove('field-error-message');
                    }
                    
                    // Remove the event listener after it's triggered once
                    confirmPasswordInput.removeEventListener('focus', focusListener);
                };
                confirmPasswordInput.addEventListener('focus', focusListener);
                
                return;
            }
            
            const passwordErrors = validatePassword(password);
            if (passwordErrors.length > 0) {
                const message = `Password need to be ${passwordErrors.join(', ')}.`;
                showValidationError('password', message);
                return;
            }
            
            if (!isValid) {
                return;
            }
            
            // Disable submit button and show loading state
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.classList.add('loading');
            submitBtn.textContent = 'Creating User...';
            
            const formData = {
                username: document.getElementById('username').value,
                fullName: document.getElementById('fullName').value,
                email: document.getElementById('email').value,
                phoneNumber: document.getElementById('phoneNumber').value,
                country: document.getElementById('country').value,
                clinic: document.getElementById('clinic').value,
                address: document.getElementById('address').value,
                postcode: document.getElementById('postcode').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                password: document.getElementById('password').value,
                confirmPassword: document.getElementById('confirmPassword').value,
                role: document.querySelector('input[name="role"]:checked').value
            };
            
            const response = await axios.post('/register', formData)
                .then(response => {
                    formValidation.clearAllValidation('createUserForm');
                    formValidation.clearFormError('createUserForm');
                    // Redirect to user management page with success message
                    
                    window.location.href = `/user-management?success=${encodeURIComponent(response.data.message)}`;
                }).catch(error => {
                    console.error(error);
                    if (error.response && error.response.data && error.response.data.message) {
                        Toast.error(error.response.data.message);
                    } else {
                        Toast.error('Network error. Please try again.');
                    }
                    return;
                }).finally(() => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('loading');
                    submitBtn.textContent = originalText;
                });
        });

        // Cancel button
        document.getElementById('cancelBtn').addEventListener('click', () => {
            window.location.href = '/user-management';
        });

    </script>
</body>
</html>