<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Express Portal</title>
    <link rel="stylesheet" href="/assets/css/side_menu.css">
    <link rel="stylesheet" href="/assets/css/profile.css">
    <link rel="stylesheet" href="/assets/css/toast.css">
    <script src="/assets/js/components.js"></script>
</head>
<body>
    <!-- Navigation Rail Component -->
    <div id="navRail"></div>

    <!-- Main Content -->
    <main class="main-content">
        <div class="content-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href="/" class="breadcrumb-item">Home</a>
                <span class="breadcrumb-separator">
                    <img src="/assets/images/breadcrumb-arrow.svg" alt="Breadcrumb Arrow">
                </span>
                <span class="breadcrumb-item active">Profile</span>
            </nav>

            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">Profile</h1>
                <button class="btn btn-primary" id="changePasswordBtn">Change Password</button>
            </div>

            <!-- Profile Content -->
            <div class="profile-content">
                <!-- User Info -->
                <div class="user-info">
                    <div class="user-avatar"><%= user.fullName.charAt(0) %></div>
                    <div class="user-details">
                        <h2 class="full-name"><%= user.fullName %></h2>
                        <p class="user-id">User ID: <%= user.id %></p>
                    </div>
                </div>

                <!-- Profile Details Grid -->
                <div class="profile-grid">
                    <div class="profile-column">
                        <div class="profile-field">
                            <label>Username</label>
                            <span><%= user.username %></span>
                        </div>
                        <div class="profile-field">
                            <label>Role</label>
                            <span><%= user.role.charAt(0).toUpperCase() + user.role.slice(1).toLowerCase() %></span>
                        </div>
                    </div>

                    <div class="profile-column">
                        <div class="profile-field">
                            <label>Phone Number</label>
                            <span><%= user.phoneNumber || '-' %></span>
                        </div>
                        <div class="profile-field">
                            <label>Email</label>
                            <span><%= user.email || '-' %></span>
                        </div>
                    </div>

                    <div class="profile-column">
                        <div class="profile-field">
                            <label>Clinic</label>
                            <span><%= user.clinic || '-' %></span>
                        </div>
                        <div class="profile-field">
                            <label>Country</label>
                            <span><%= user.country ? (user.country.charAt(0).toUpperCase() + user.country.slice(1).toLowerCase()) : '-' %></span>
                        </div>
                    </div>
                </div>

                <!-- Delivery Address -->
                <div class="delivery-address">
                    <label>Delivery Address</label>
                    <% if (user.address) { %>
                        <span><%= user.address %>, <%= user.postcode %>, <%= user.city %>, <%= user.state %></span>
                    <% } else { %>
                        <span>-</span>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <!-- Change Password Modal -->
    <div class="modal" id="passwordModal">
        <div class="modal-content">
            <div class="modal-header password-modal-header">
                <h3>Change Password</h3>
                <button class="modal-close" id="closeModal">
                    <img src="/assets/images/x-icon.svg" alt="Close">
                </button>
            </div>
            <div class="modal-body">
                <form id="changePasswordForm">
                    <div class="form-field">
                        <label for="currentPassword">
                            <span class="required-asterisk">*</span>
                            <span class="label-text">Current Password</span>
                        </label>
                        <div class="input-container">
                            <input type="password" id="currentPassword" placeholder="************">
                            <button type="button" class="password-toggle" data-target="currentPassword">
                                <img src="/assets/images/eye-icon.svg" alt="Toggle Password" class="eye-icon">
                            </button>
                        </div>
                        <div class="validation-message" id="currentPasswordError"></div>
                    </div>
                    <div class="form-field">
                        <div class="label-strength-row">
                            <label for="newPassword">
                                <span class="required-asterisk">*</span>
                                <span class="label-text">New Password</span>
                            </label>
                            <div class="password-strength-container">
                                <span class="password-strength" id="passwordStrength"></span>
                            </div>
                        </div>
                        <div class="input-container">
                            <input type="password" id="newPassword" placeholder="************">
                            <button type="button" class="password-toggle" data-target="newPassword">
                                <img src="/assets/images/eye-icon.svg" alt="Toggle Password" class="eye-icon">
                            </button>
                        </div>
                        <div class="password-strength-bars" id="passwordStrengthBars">
                            <div class="strength-bar"></div>
                            <div class="strength-bar"></div>
                            <div class="strength-bar"></div>
                        </div>
                        <div class="validation-message" id="newPasswordError"></div>
                    </div>
                    <div class="form-field">
                        <label for="confirmPassword">
                            <span class="required-asterisk">*</span>
                            <span class="label-text">Confirm New Password</span>
                        </label>
                        <div class="input-container">
                            <input type="password" id="confirmPassword" placeholder="************">
                            <button type="button" class="password-toggle" data-target="confirmPassword">
                                <img src="/assets/images/eye-icon.svg" alt="Toggle Password" class="eye-icon">
                            </button>
                        </div>
                        <div class="validation-message" id="confirmPasswordError"></div>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-cancel" id="cancelBtn">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="confirmBtn">Confirm</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="/assets/js/jquery.js"></script>
    <script src="/assets/js/axios.min.js"></script>
    <script src="/assets/js/toast.js"></script>
    <script>
        // Load navigation rail component
        document.addEventListener('DOMContentLoaded', () => {
            loadComponent('navRail', '/components/side-menu');
        });

        // Modal functionality
        const modal = document.getElementById('passwordModal');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const closeModal = document.getElementById('closeModal');
        const cancelBtn = document.getElementById('cancelBtn');

        changePasswordBtn.addEventListener('click', () => {
            modal.classList.add('show');
            clearValidation();
        });
        
        closeModal.addEventListener('click', () => {
            modal.classList.remove('show');
            clearValidation();
        });
        
        cancelBtn.addEventListener('click', () => {
            modal.classList.remove('show');
            clearValidation();
        });
        
        window.onclick = (e) => {
            if (e.target == modal) {
                modal.classList.remove('show');
                clearValidation();
            }
        };

        // Password visibility toggle functionality
        document.querySelectorAll('.password-toggle').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                const eyeIcon = this.querySelector('.eye-icon');
                
                if (input.type === 'password') {
                    input.type = 'text';
                    eyeIcon.src = '/assets/images/eye-closed-icon.svg';
                } else {
                    input.type = 'password';
                    eyeIcon.src = '/assets/images/eye-icon.svg';
                }
            });
        });

        // Password validation functions
        function validatePassword(password) {
            const errors = [];
            
            if (password.length < 8) {
                errors.push('at least 8 characters');
            }
            if (!/(?=.*[0-9])/.test(password)) {
                errors.push('1 number');
            }
            if (!/(?=.*[!@#$%^&*])/.test(password)) {
                errors.push('1 special character');
            }
            if (!/(?=.*[A-Z])/.test(password)) {
                errors.push('1 uppercase');
            }
            if (!/(?=.*[a-z])/.test(password)) {
                errors.push('1 lowercase character');
            }
            
            return errors;
        }

        function getPasswordStrength(password) {
            const errors = validatePassword(password);
            
            // Weak: Missing 3 or more requirements
            if (errors.length >= 3) return 'weak';
            
            // Good: Missing 1-2 requirements OR all requirements met but less than 12 chars
            if (errors.length >= 1) return 'good';
            
            // At this point errors.length === 0 (all requirements met)
            if (password.length >= 12) return 'strong';
            return 'good';
        }

        function showValidationError(inputId, message) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            
            input.classList.add('error');
            if (errorElement) {
                errorElement.className = 'validation-message';
                errorElement.textContent = message;
            }
        }

        function clearValidationError(inputId) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            
            input.classList.remove('error');
            if (errorElement) {
                errorElement.textContent = '';
                errorElement.className = 'validation-message';
            }
        }

        function showValidationMessage(inputId, message, type) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(inputId + 'Error');
            
            input.classList.remove('error');
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.className = `validation-message ${type}`;
            }
        }

        function clearValidation() {
            ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
                clearValidationError(id);
            });
            
            // Clear password strength
            const strengthElement = document.getElementById('passwordStrength');
            const strengthBars = document.getElementById('passwordStrengthBars');
            strengthElement.textContent = '';
            strengthElement.className = 'password-strength';
            strengthBars.className = 'password-strength-bars';
            
            // Reset focus state and strength tracking
            isPasswordFocused = false;
            currentPasswordStrength = '';
            
            // Reset form
            document.getElementById('changePasswordForm').reset();
        }

        // Track password input focus state and strength
        let isPasswordFocused = false;
        let currentPasswordStrength = '';

        // Real-time validation
        const newPasswordInput = document.getElementById('newPassword');
        
        newPasswordInput.addEventListener('focus', () => {
            isPasswordFocused = true;
            // Show strength indicators when focused
            updatePasswordStrengthVisibility();
        });

        newPasswordInput.addEventListener('blur', () => {
            isPasswordFocused = false;
            // Hide strength indicators if password is strong and unfocused
            updatePasswordStrengthVisibility();
        });

        function updatePasswordStrengthVisibility() {
            const strengthBars = document.getElementById('passwordStrengthBars');
            const validationMessage = document.getElementById('newPasswordError');
            
            // Hide validation message and strength bars if password is strong and input is not focused
            if (currentPasswordStrength === 'strong' && !isPasswordFocused) {
                validationMessage.textContent = '';
                validationMessage.className = 'validation-message';
                strengthBars.className = 'password-strength-bars';
            } else if (currentPasswordStrength === 'strong' && isPasswordFocused) {
                // Show validation message and strength bars when focused and password is strong
                validationMessage.textContent = 'Your password is strongly secure and you are all set.';
                validationMessage.className = 'validation-message success';
                strengthBars.className = `password-strength-bars visible ${currentPasswordStrength}`;
            }
        }

        newPasswordInput.addEventListener('input', (e) => {
            const password = e.target.value;
            const strengthElement = document.getElementById('passwordStrength');
            const strengthBars = document.getElementById('passwordStrengthBars');
            
            if (password.length > 0) {
                const errors = validatePassword(password);
                const strength = getPasswordStrength(password);
                currentPasswordStrength = strength;
                
                // Always update strength indicator text
                strengthElement.textContent = strength.charAt(0).toUpperCase() + strength.slice(1);
                strengthElement.className = `password-strength ${strength}`;
                
                // Show strength bars normally, but they'll be hidden by updatePasswordStrengthVisibility if needed
                strengthBars.className = `password-strength-bars visible ${strength}`;
                
                // Show validation errors or success messages
                //console.log('Password:', password, 'Errors:', errors, 'Strength:', strength); // Debug log
                
                if (errors.length > 0 && strength === 'weak') {
                    console.log(1)
                    // Dynamic error message showing only missing requirements
                    const message = `Password need to be ${errors.join(', ')}.`;
                    showValidationError('newPassword', message);
                } else {
                    // Show success messages for good and strong passwords
                    if (strength === 'good') {
                        showValidationMessage('newPassword', 'Your password meets all the necessary requirements. You can optionally lengthen it to make it stronger.', 'success');
                    } else if (strength === 'strong') {
                        // Handle strong password validation message based on focus
                        if (isPasswordFocused) {
                            showValidationMessage('newPassword', 'Your password is strongly secure and you are all set.', 'success');
                        } else {
                            // Hide validation message when unfocused and strong
                            updatePasswordStrengthVisibility();
                        }
                    } else {
                        clearValidationError('newPassword');
                    }
                }
            } else {
                currentPasswordStrength = '';
                strengthElement.textContent = '';
                strengthElement.className = 'password-strength';
                // Hide strength bars when password is empty
                strengthBars.className = 'password-strength-bars';
                clearValidationError('newPassword');
            }
            
            // Re-validate confirm password if it has a value
            const confirmPassword = document.getElementById('confirmPassword').value;
            if (confirmPassword.length > 0) {
                validateConfirmPassword();
            }
        });

        function validateConfirmPassword() {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (confirmPassword.length > 0) {
                if (newPassword !== confirmPassword) {
                    showValidationError('confirmPassword', 'Confirm New Password is required.');
                } else {
                    clearValidationError('confirmPassword');
                }
            }
        }

        //document.getElementById('confirmPassword').addEventListener('input', validateConfirmPassword);

        document.getElementById('changePasswordForm').onsubmit = async (e) => {
            e.preventDefault();
            
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            // Clear previous validation
            clearValidation();
            let hasErrors = false;

            // Validate current password
            if (!currentPassword) {
                showValidationError('currentPassword', 'Current Password is required.');
                hasErrors = true;
            }

            // Validate new password
            const passwordErrors = validatePassword(newPassword);
            if (!newPassword) {
                showValidationError('newPassword', 'New Password is required.');
                hasErrors = true;
            } else if (passwordErrors.length > 0) {
                const message = `Password need to be ${passwordErrors.join(', ')}.`;
                showValidationError('newPassword', message);
                hasErrors = true;
            }

            // Validate confirm password
            if (!confirmPassword) {
                showValidationError('confirmPassword', 'Confirm New Password is required.');
                hasErrors = true;
            } else if (newPassword !== confirmPassword) {
                showValidationError('confirmPassword', 'Passwords do not match.');
                hasErrors = true;
            }

            if (hasErrors) {
                return;
            }
            const formData = {
                oldPassword: currentPassword,
                newPassword: newPassword,
                confirmNewPassword: confirmPassword
            }

            // Disable submit button and show loading state
            const submitBtn = document.getElementById('confirmBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.classList.add('loading');
            submitBtn.textContent = 'Changing Password...';

            const response = await axios.post('/change-password', formData)
                .then(response => {
                  //close modal
                  modal.classList.remove('show');
                    Toast.success('Password changed successfully');
                    clearValidation();
                    // Clear form fields
                    document.getElementById('currentPassword').value = '';
                    document.getElementById('newPassword').value = '';
                    document.getElementById('confirmPassword').value = '';
                }).catch(error => {
                    console.error(error);
                    if (error.response && error.response.data && error.response.data.message) {
                        Toast.error(error.response.data.message);
                    } else {
                        Toast.error('Network error. Please try again.');
                    }
                }).finally(() => {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('loading');
                    submitBtn.textContent = originalText;
                });
        };

        document.addEventListener('DOMContentLoaded', () => {
            const languageFab = document.getElementById('languageFab');
            if (!languageFab) return;
            languageFab.addEventListener('click', () => console.log('Language selection clicked'));

        });
        
    </script>
</body>
</html>